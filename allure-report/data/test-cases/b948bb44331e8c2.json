{
  "uid" : "b948bb44331e8c2",
  "name" : "test_add_group[Name=name1', id=None, Header=header1, Footer=footer]",
  "fullName" : "tests.test_add_group#test_add_group",
  "historyId" : "eb4d0cf8694947e8084e47f5c3f6c26a",
  "time" : {
    "start" : 1584449546468,
    "stop" : 1584449547176,
    "duration" : 708
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert [Name=asda, i...r=footer, ...] == [Name=asda, i...r=footer, ...]\n  Left contains one more item: Name=name1', id=None, Header=header1, Footer=footer\n  Use -v to get the full diff",
  "statusTrace" : "app = <fixture.application.Application object at 0x03D13C88>, db = <fixture.db.DbFixture object at 0x03D133E8>, data_groups = Name=name1', id=None, Header=header1, Footer=footer, check_ui = False\n\n    def test_add_group(app, db, data_groups, check_ui):\n        group = data_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step(f'When I add group {group} to the list'):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [Name=asda, i...r=footer, ...] == [Name=asda, i...r=footer, ...]\nE             Left contains one more item: Name=name1', id=None, Header=header1, Footer=footer\nE             Use -v to get the full diff\n\ntests\\test_add_group.py:15: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "stop",
    "time" : {
      "start" : 1584449532306,
      "stop" : 1584449532306,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1584449532307,
      "stop" : 1584449532372,
      "duration" : 65
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "app",
    "time" : {
      "start" : 1584449546407,
      "stop" : 1584449546467,
      "duration" : 60
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "check_ui",
    "time" : {
      "start" : 1584449546467,
      "stop" : 1584449546467,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert [Name=asda, i...r=footer, ...] == [Name=asda, i...r=footer, ...]\n  Left contains one more item: Name=name1', id=None, Header=header1, Footer=footer\n  Use -v to get the full diff",
    "statusTrace" : "app = <fixture.application.Application object at 0x03D13C88>, db = <fixture.db.DbFixture object at 0x03D133E8>, data_groups = Name=name1', id=None, Header=header1, Footer=footer, check_ui = False\n\n    def test_add_group(app, db, data_groups, check_ui):\n        group = data_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step(f'When I add group {group} to the list'):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [Name=asda, i...r=footer, ...] == [Name=asda, i...r=footer, ...]\nE             Left contains one more item: Name=name1', id=None, Header=header1, Footer=footer\nE             Use -v to get the full diff\n\ntests\\test_add_group.py:15: AssertionError",
    "steps" : [ {
      "name" : "Given a group list",
      "time" : {
        "start" : 1584449546468,
        "stop" : 1584449546469,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "When I add group Name=name1', id=None, Header=header1, Footer=footer to the list",
      "time" : {
        "start" : 1584449546470,
        "stop" : 1584449547158,
        "duration" : 688
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Then the new group list is equal to the old list with the added group",
      "time" : {
        "start" : 1584449547159,
        "stop" : 1584449547175,
        "duration" : 16
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert [Name=asda, i...r=footer, ...] == [Name=asda, i...r=footer, ...]\n  Left contains one more item: Name=name1', id=None, Header=header1, Footer=footer\n  Use -v to get the full diff\n",
      "statusTrace" : "  File \"D:\\tproger\\Pycharm Projects\\Python_training\\tests\\test_add_group.py\", line 15, in test_add_group\n    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "stop::fin",
    "time" : {
      "start" : 1584449547284,
      "stop" : 1584449550031,
      "duration" : 2747
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::fin",
    "time" : {
      "start" : 1584449547283,
      "stop" : 1584449547283,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_add_group"
  }, {
    "name" : "host",
    "value" : "DESKTOP-V3KKSI0"
  }, {
    "name" : "thread",
    "value" : "5932-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_add_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data_groups",
    "value" : "Name=name1', id=None, Header=header1, Footer=footer"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b948bb44331e8c2.json",
  "parameterValues" : [ "Name=name1', id=None, Header=header1, Footer=footer" ]
}